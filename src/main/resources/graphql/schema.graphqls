type Query {
    # users
    users: [User]
    userByEmail(email: String!): User
    # movies
    movies: [Movie]

    # watch mode API
    sources: [WatchModeSource]
    networks: [WatchModeNetwork]
    searchTitles(title: String!): [TitleSearchResult]

    titleDetail(id: ID!): TitleDetail
}

type User {
    email: String!
    name: String
    password: String
    wishlists: [Wishlist]
}

type Wishlist {
    id: ID!
    name: String
    movies: [Movie]
}

type Movie {
    id: ID!
    title: String
    releaseYear: Int
    wishlists: [Wishlist]
}

type TitleSearchResult {
    name: String
    relevance: Float
    type: String
    id: Int
    year: Int
    # result_type: String
    tmdb_id: Int
    tmdb_type: String
    image_url: String
}

type WatchModeSource {
    id: ID
    name: String
    type: String
    logo_100px: String
    ios_appstore_url: String
    android_playstore_url: String
    android_scheme: String
    ios_scheme: String
    regions: [String]
}

type WatchModeNetwork {
    id: ID!
    name: String
    origin_country: String
    tmdb_id: Int
}

type TitleDetail {
    id: ID!
    title: String
    original_title: String
    plot_overview: String
    type: String
    runtime_minutes: Int
    year: Int
    end_year: Int
    release_date: String
    imdb_id: String
    tmdb_id: Int
    tmdb_type: String
    genres: [Int]
    genre_names: [String]
    user_rating: Float
    critic_score: Int
    us_rating: String
    poster: String
    backdrop: String
    original_language: String
    similar_titles: [Int]
    networks: [Int]
    network_names: [String]
    trailer: String
    trailer_thumbnail: String
    relevance_percentile: Float
    sources: [WatchModeSource]
}
